#!/usr/bin/env ruby
# coding: utf-8

require 'metadata/certificate/certificate_factory'
require 'metadata/checker'
require 'metadata/expiry/certificate_result'
require 'metadata/ocsp/pem_checker'
require 'metadata/saml/parser'
require 'metadata/saml/client'
require 'metadata/sources/client'
require 'mixlib/cli'
require 'prometheus/middleware/exporter'
require 'sinatra/base'
require 'yaml'

class ValidUntilMetric < Prometheus::Client::Gauge
  def initialize(metadata_url)
    super(:verify_metadata_expiry, "The validUntil date of the given metadata")
    @metadata_url = metadata_url
    @metadata_client = Metadata::SAML::Client.new
    @parser = Metadata::SAML::Parser.new
  end

  def values
    # we're being scraped

    # we create a new gauge each time to avoid keeping metrics for
    # certificates which have been removed from metadata
    gauge = Prometheus::Client::Gauge.new(name, docstring)
    document = @metadata_client.get(@metadata_url, false)

    valid_until = @parser.valid_until(document)

    gauge.set({ metadata: @metadata_url }, valid_until)

    # return the metrics to prometheus
    return gauge.values
  end
end

class ExpiryDateMetric < Prometheus::Client::Gauge
  def initialize(metadata_url)
    super(:verify_metadata_certificate_expiry, "The NotAfter date of the given X.509 SAML certificate")
    @metadata_url = metadata_url
    @metadata_client = Metadata::SAML::Client.new
    @parser = Metadata::SAML::Parser.new
    @certificate_factory = Metadata::Certificate::CertificateFactory.new
  end

  def values
    # we're being scraped

    # we create a new gauge each time to avoid keeping metrics for
    # certificates which have been removed from metadata
    gauge = Prometheus::Client::Gauge.new(name, docstring)
    document = @metadata_client.get(@metadata_url, false)

    # these are all the certs served from the metadata
    check_and_set(gauge, @parser.certificate_identities(document))

    # this is the cert used to sign the metadata document itself
    signing_cert = @parser.signing_certificate(document)
    check_and_set(gauge, signing_cert) unless signing_cert.nil?

    # return the metrics to prometheus
    return gauge.values
  end

  private

  def check_and_set(gauge, certificate_identities)
    certificate_identities.each do |pem, entity|
      cert = @certificate_factory.from_inline_pem(pem)
      # grafana prefers timestamps to be in milliseconds :(
      not_on_or_after = cert.not_after.to_time.to_f * 1000
      entity.each do |e|
        gauge.set({ entity_id: e[:entity_id],
                    use: e[:key_use],
                    serial: cert.serial,
                    subject: cert.subject,
                  }, not_on_or_after)
      end
    end
  end

end

# ocsp - same as ExpiryDateMetric but 0 (fail) or 1 (pass)
class OcspCheckMetric < Prometheus::Client::Gauge
  def initialize(metadata_url, ca_files)
    super(:verify_metadata_certificate_ocsp_success, "If a cert chain validation and OCSP check of the given X.509 SAML certificate is good (1) or bad (0)")
    @metadata_url = metadata_url
    @ca_files = ca_files
    @metadata_client = Metadata::SAML::Client.new
    @parser = Metadata::SAML::Parser.new
    @certificate_factory = Metadata::Certificate::CertificateFactory.new
    @pem_checker = Metadata::Ocsp::PemChecker.new
  end

  def values
    # we're being scraped

    # we create a new gauge each time to avoid keeping metrics for
    # certificates which have been removed from metadata
    gauge = Prometheus::Client::Gauge.new(name, docstring)
    document = @metadata_client.get(@metadata_url, false)

    # these are all the certs served from the metadata
    check_and_set(gauge, @parser.certificate_identities(document), @ca_files)

    # this is the cert used to sign the metadata document itself
    check_and_set(gauge, @parser.signing_certificate(document), @ca_files)

    # return the metrics to prometheus
    return gauge.values
  end

  private

  def check_and_set(gauge, certificate_identities, ca_files)
    return if certificate_identities.nil?

    pems = certificate_identities.keys
    ocsp_results = @pem_checker.check_pems(pems, ca_files)
    certificate_identities.map do |pem, identities|
      identities.map do |identity|
        cert = @certificate_factory.from_inline_pem(pem)

        ocsp_result = ocsp_results[pem].revoked? ? 0 : 1

        unless ocsp_results[pem].unknown?
          gauge.set({ entity_id: identity.entity_id,
                      use: identity.key_use,
                      serial: cert.serial,
                      subject: cert.subject,
                    }, ocsp_result)
        end
      end
    end
  end
end

class SourcesMetric < Prometheus::Client::Gauge
  def initialize(metadata_url, environment)
    super(:verify_metadata_sources_check, "If the sources match the deployed metadata. Value is the number of different certs. Labels show which certs were unexpected and where they were found.")
    @metadata_url = metadata_url
    @metadata_client = Metadata::SAML::Client.new
    @github_sources_client = Metadata::Sources::Client.new(ENV['GITHUB_API_TOKEN'], environment)
    @parser = Metadata::SAML::Parser.new
    @cert_factory = Metadata::Certificate::CertificateFactory.new
  end

  def values
    gauge = Prometheus::Client::Gauge.new(name, docstring)
    check_and_set(
      gauge,
      @github_sources_client.get,
      @parser.all_entity_certificates(@metadata_client.get(@metadata_url, false))
    )
    # return the metrics to prometheus
    return gauge.values
  end

  private

  def check_and_set(gauge, source_certs, published_certs)
    source_certs_not_in_published = (source_certs - published_certs).map { |cert| @cert_factory.from_inline_pem(cert).subject.to_s }
    published_certs_not_in_source = (published_certs - source_certs).map { |cert| @cert_factory.from_inline_pem(cert).subject.to_s }

    gauge.set({
                source_certs_not_in_published: source_certs_not_in_published.join(', '),
                published_certs_not_in_source: published_certs_not_in_source.join(', '),
              },
              source_certs_not_in_published.length + published_certs_not_in_source.length
    )
  end
end

class PrometheusMetadataExporter
  include Mixlib::CLI

  option :port, :short => '-p PORT', required: false, default: 9199, description: "Port to listen on (default 9199)"
  option :metadata_url, :short => '-m METADATA_URL', required: true, description: "URL to fetch metadata from"
  option :environment, :short => '-e ENVIRONMENT', required: true, description: "The environment (staging, integration, prod)"
  option :ca_file_list, :long => '--cas DIR', required: true, description: "Directory containing CA certificate files in PEM format"

  def gogogo
    dir = config[:ca_file_list]
    ca_file_list = Dir.children(dir).collect { |name| File.join(dir, name) }

    Prometheus::Client::registry.register(ExpiryDateMetric.new(config[:metadata_url]))
    Prometheus::Client::registry.register(ValidUntilMetric.new(config[:metadata_url]))
    Prometheus::Client::registry.register(OcspCheckMetric.new(config[:metadata_url], ca_file_list))
    Prometheus::Client::registry.register(SourcesMetric.new(config[:metadata_url], config[:environment]))
  end
end

class App < Sinatra::Base
  use Prometheus::Middleware::Exporter

  exporter = PrometheusMetadataExporter.new
  exporter.parse_options

  set :port, exporter.config[:port]
  set :bind, '0.0.0.0'
  set :show_exceptions, false

  exporter.gogogo
  run!
end


